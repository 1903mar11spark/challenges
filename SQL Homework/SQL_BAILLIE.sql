--2.1 SELECT
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY

SELECT * FROM ALBUM ORDER BY TITLE DESC ;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO

INSERT ALL
    INTO GENRE VALUES (27, 'Smooth Jazz')
    INTO GENRE VALUES (28, 'German Rock')
SELECT * FROM DUAL;

INSERT ALL
    INTO EMPLOYEE VALUES (9, 'Capulet', 'River','Online Sales', 2, TO_DATE('1980-04-18', 'yyyy-mm-dd'), TO_DATE('2019-03-15', 'yyyy-mm-dd'), 
    '123 Italian Boards', 'Denver', 'Colorodo', 'United States', '33042', '+1 334-323-2321', '+2 344-232-2323','capuletR@gmail.com')
    INTO EMPLOYEE VALUES (10,'Montegue', 'Rain', 'Floor Sales', 2, TO_DATE('1945-09-08', 'yyyy-mm-dd'), TO_DATE('2019-03-14', 'yyyy-mm-dd'),
    '33 Balcony Rose', 'East Kilbride', 'Scotland', 'United Kingdom', 'TSF 42RW', '+9 334-333-2321', '+9 344-554-2323','montagueR@gmail.com')
    INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, SUPPORTREPID) VALUES
        (60, 'Bob', 'Evans', 'macaroniCheese@gmail.com', 5)
    INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, SUPPORTREPID) VALUES 
        (61, 'Mary', 'Currie', 'radiation4me@gmail.com', 3)
SELECT * FROM DUAL;

--2.4 UPDATE

UPDATE 
    CUSTOMER
SET 
    FIRSTNAME = 'ROBERT',
    LASTNAME = 'WALTER'
WHERE 
    CUSTOMERID = 32;
    

UPDATE 
    ARTIST
SET 
    NAME = 'CCR'
WHERE 
    NAME = 'Creedence Clearwater Revival';

--2.5 LIKE

SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN

SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM 
    EMPLOYEE 
WHERE 
    HIREDATE 
BETWEEN 
    TO_DATE('2003-06-01', 'yyyy-mm-dd') 
    AND 
    TO_DATE('2004-03-01', 'yyyy-mm-dd');

--2.7 DELETE

DELETE FROM
    CUSTOMER
WHERE
    CUSTOMERID = 32;

DELETE FROM
    INVOICE
WHERE
    CUSTOMERID = 32;

DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 116;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 342;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 245;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 268;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 290;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 50;
    
DELETE FROM 
    INVOICELINE
WHERE
    INVOICEID = 61;

--3 SQL FUNCTIONS
--3.1 SYSTEMS DEFINED FUNCTIONS

SELECT CURRENT_TIMESTAMP
FROM DUAL;

SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS

SELECT AVG(TOTAL)
FROM INVOICE;

-- MAX PRICE

SELECT MAX(UNITPRICE)
FROM TRACK;

-- TRACKS WITH MAX PRICE

SELECT
    NAME
FROM
    TRACK
WHERE
    UNITPRICE =(
        SELECT
            MAX(UNITPRICE)
        FROM
            TRACK
            );

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION FC_AVGPRC
RETURN NUMBER
IS 
AVERAGE NUMBER;
BEGIN
    SELECT 
        AVG(UNITPRICE)
    INTO
        AVERAGE
    FROM
        INVOICELINE;
    RETURN AVERAGE;
END;
/


DECLARE
    AV NUMBER;
BEGIN
    AV:=FC_AVGPRC;
    DBMS_OUTPUT.PUT_LINE(AV);
END;
/



--3.4 USER DEFINED TABLE VALUED FUNCTIONS

CREATE OR REPLACE FUNCTION PRINT_ALL_EMPWBD
RETURN SYS_REFCURSOR
IS 
    S SYS_REFCURSOR; 
BEGIN
    OPEN S FOR
    SELECT 
        EMPLOYEEID, LASTNAME, FIRSTNAME
    FROM
        EMPLOYEE
    WHERE
        BIRTHDATE > TO_DATE('1967-12-31', 'yyyy-mm-dd');
    RETURN S;
END;

DECLARE
S SYS_REFCURSOR;
    A_ID EMPLOYEE.EMPLOYEEID%TYPE; 
    A_LAST EMPLOYEE.LASTNAME%TYPE;
    A_FIRST EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    S := PRINT_ALL_EMPWBD;
    LOOP
    FETCH S INTO A_ID, A_LAST, A_FIRST; 
    EXIT WHEN S%NOTFOUND;            
    DBMS_OUTPUT.PUT_LINE('ID: '||A_ID||', LASTNAME: '||A_LAST|| ', FIRSTNAME: ' || A_FIRST);
    END LOOP;
    CLOSE S;
END;

--4.0 STORED PROCEDURES

--4.1 BASIC STORED PROCEDURE-----------------------------

CREATE OR REPLACE PROCEDURE SP_FIRSTLAST
    (A_EMPLOYEEID IN NUMBER,
    A_FIRSTNAME OUT VARCHAR2,
    B_LASTNAME OUT VARCHAR2)
AS
BEGIN
    SELECT 
        FIRSTNAME,
        LASTNAME
    INTO
        A_FIRSTNAME, B_LASTNAME
    FROM 
        EMPLOYEE 
    WHERE
        EMPLOYEEID = A_EMPLOYEEID;
END;


DECLARE
    A_FIRSTNAME VARCHAR2(20 BYTE);
    B_LASTNAME VARCHAR2 (20 BYTE);
    E_EMPLOYEEID NUMBER:= 1;
BEGIN
    FOR E_EMPLOYEEID IN 1..10
    LOOP
    SP_FIRSTLAST(E_EMPLOYEEID, A_FIRSTNAME, B_LASTNAME);
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: ' || A_FIRSTNAME || ' LAST NAME: ' || B_LASTNAME);
    END LOOP;
END;

---WORKS BUT NOT A FUNCTION
DECLARE
E_FIRSTNAME VARCHAR2(20 BYTE);
E_LASTNAME VARCHAR2 (20 BYTE);
E_EMPLOYEEID NUMBER;
    CURSOR E_EMPLOYEE IS
        SELECT EMPLOYEEID, FIRSTNAME, LASTNAME FROM EMPLOYEE;
BEGIN
    OPEN E_EMPLOYEE;
    LOOP
    FETCH E_EMPLOYEE INTO E_EMPLOYEEID, E_FIRSTNAME, E_LASTNAME;
    EXIT WHEN E_EMPLOYEE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: ' || E_FIRSTNAME || ' LAST NAME: ' || E_LASTNAME);
    END LOOP;
    CLOSE E_EMPLOYEE;
END;
/
--4.2 STORED PROCEDURE INPUT PARAMETERS
--Task – Create a stored procedure that updates the personal information of an employee.

CREATE OR REPLACE PROCEDURE SP_UPDATE
    (
    A_EMPLOYEEID IN NUMBER, 
    A_FIRSTNAME IN VARCHAR2,
    A_LASTNAME IN VARCHAR2, 
    A_TITLE IN VARCHAR2, 
    A_REPORTSTO IN NUMBER
    )
IS

BEGIN
    UPDATE 
        EMPLOYEE
    SET
        FIRSTNAME = A_FIRSTNAME,
        LASTNAME = A_LASTNAME,
        TITLE = A_TITLE,
        REPORTSTO = A_REPORTSTO
    WHERE 
        EMPLOYEEID = A_EMPLOYEEID;
    
END;
--CAN MAKE BETTER BY DETMINING IF USER EXISTS
--SELECT COUNT(EE.EMPLOYEEID) INTO EE_EXISTS FROM EMPLOYEE EE WHERE EE.EMPLOYEEID = A_EMPLOYEEID;IF EE_EXISTS > 0 THEN
DECLARE
BEGIN
    SP_UPDATE(1, 'JULIET', 'RIVER', 'CAPTAIN HOOK', 1 );
END;

--Task – Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE SP_MANAGER
    (
    A_EMPLOYEEID IN NUMBER, 
    A_LASTNAME OUT VARCHAR2,  
    B_LASTNAME OUT VARCHAR2
    )
IS
BEGIN
    SELECT 
        E1.LASTNAME,
        E2.LASTNAME
    INTO
        A_LASTNAME,
        B_LASTNAME
    FROM 
        EMPLOYEE E1
    INNER JOIN 
        EMPLOYEE E2
    ON
        E2.EMPLOYEEID = E1.REPORTSTO;
END;

DECLARE
    A_LASTNAME VARCHAR2(20 BYTE);  
    B_LASTNAME VARCHAR2(20 BYTE);
BEGIN
    SP_MANAGER(3, A_LASTNAME, B_LASTNAME);
    DBMS_OUTPUT.PUT_LINE(A_LASTNAME || 'IS MANAGED BY' || ' LAST NAME: ' || B_LASTNAME);
END;

--4.3 STORED PROCEDURE OUTPUT PARAMETERS
--Create a stored procedure that returns the name and company of a customer.

CREATE OR REPLACE PROCEDURE SP_MANAGES
    (
    A_EMPLOYEEID IN NUMBER, 
    A_REPORTSTO OUT NUMBER
    )
IS
BEGIN
    SELECT 
        REPORTSTO
    INTO
        A_REPORTSTO
    FROM 
        EMPLOYEE
    WHERE
        EMPLOYEEID = A_EMPLOYEEID;
END;
/
DECLARE
    A_REPORTSTO NUMBER;  
BEGIN
    SP_MANAGES(5, A_REPORTSTO);
    DBMS_OUTPUT.PUT_LINE('REPORTSTO ' || A_REPORTSTO);
END;


CREATE OR REPLACE PROCEDURE SP_CUSTOMERINFO
    (
    A_CUSTOMERID IN NUMBER, 
    A_FIRSTNAME OUT VARCHAR2,
    A_LASTNAME OUT VARCHAR2,
    A_COMPANY OUT VARCHAR2
    )
IS
BEGIN
    SELECT 
        FIRSTNAME,
        LASTNAME,
        COMPANY
    INTO
         A_FIRSTNAME,
         A_LASTNAME,
         A_COMPANY
    FROM 
        CUSTOMER
    WHERE
        CUSTOMERID = A_CUSTOMERID;
END;

DECLARE
    A_FIRSTNAME VARCHAR2(40 BYTE);  
    A_LASTNAME VARCHAR2(20 BYTE);
    A_COMPANY VARCHAR(80 BYTE);
BEGIN
    SP_CUSTOMERINFO(5, A_FIRSTNAME, A_LASTNAME, A_COMPANY);
    DBMS_OUTPUT.PUT_LINE('THE CUSTOMER IS: ' || A_FIRSTNAME || ' LAST NAME: ' || A_LASTNAME || 'AND WORKS AT '|| A_COMPANY);
END;

--5.0 TRANSACTIONS
--Create a transaction that given a invoiceId will delete that invoice 
--(There may be constraints that rely on this, find out how to resolve them).
CREATE OR REPLACE PROCEDURE SP_INVOICECH
    (
    A_INVOICEID IN NUMBER
    )
IS
BEGIN
    DELETE FROM
        INVOICE
    WHERE
        INVOICEID = A_INVOICEID;
    
END;
/



--6.0 TRIGGERS
--Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER TR_NEWRECORD
AFTER INSERT ON EMPLOYEE
FOR EACH ROW 
BEGIN 
    SELECT SQ_NEWEMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END;
/


--Task – Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE OR REPLACE TRIGGER TR_ALBUMINSERT
AFTER INSERT ON ALBUM
FOR EACH ROW 
BEGIN 
    SELECT SQ_NEWALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/

--Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE TRIGGER TR_CUSTDELETE
AFTER DELETE ON CUSTOMER
FOR EACH ROW 
BEGIN 
    SELECT SQ_CUSTOMDELE_PK.NEXTVAL INTO :OLD.CUSTOMERID FROM DUAL;
--COLON NEW -->NEW ROW WE ARE INSERTING WE ALSO HAVE :OLD
END;
/

--7.0 JOINS
--7.1 INNER.
SELECT 
    B.FIRSTNAME,
    B.LASTNAME,
    INVOICE.INVOICEID
FROM
    CUSTOMER B 
INNER JOIN 
    INVOICE
ON
    B.CUSTOMERID = INVOICE.CUSTOMERID; 


--7.2 FULL OUTER
SELECT 
    A.CUSTOMERID,
    A.FIRSTNAME,
    A.LASTNAME,
    INVOICE.INVOICEID,
    INVOICE.TOTAL
FROM
    CUSTOMER A 
FULL JOIN 
    INVOICE
ON
    A.CUSTOMERID = INVOICE.CUSTOMERID; 
   
--7.3 RIGHT
SELECT 
    ARTIST.NAME,
    C.TITLE
FROM
    ALBUM C 
RIGHT JOIN 
    ARTIST
ON
    C.ARTISTID = ARTIST.ARTISTID; 
    
--7.4 CROSS
SELECT
    *
FROM
    ALBUM
CROSS JOIN ARTIST
ORDER BY
    ARTIST.NAME ASC;

--7.5 SELF

SELECT 
    E1.LASTNAME "WORKER", E2.LASTNAME "MANAGER"
FROM 
    EMPLOYEE E1
INNER JOIN 
    EMPLOYEE E2
ON
    E2.EMPLOYEEID = E1.REPORTSTO;