-- SQL LAB


--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE (REPORTSTO IS NULL AND FIRSTNAME = 'Andrew');

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT ALL 
INTO GENRE
VALUES (27, 'Alt Rock')
SELECT * FROM DUAL;

INSERT ALL 
INTO GENRE
VALUES (26, 'Punk Rock')
SELECT * FROM DUAL;

INSERT ALL
INTO EMPLOYEE
VALUES (10, 'Belton', 'Other', 'Coffee Drinker' ,1, TO_DATE('1994-04-28','yyyy,mm,dd'),TO_DATE('2013-04-28','yyyy,mm,dd'),'123 Road St','Alberta','AB','Canada','T5K 2N1','+1 (213)123-1234','ASDF','EMAIL@AMIL.COM')
SELECT * FROM DUAL;

INSERT ALL
INTO CUSTOMER (CustomerId, FirstName ,LastName, Email)
VALUES  (60, 'Alice', 'Cooper', 'Alice@Cooper.COM')
SELECT * FROM DUAL;

INSERT ALL
INTO CUSTOMER (CustomerId, FirstName ,LastName, Email)
VALUES  (61, 'Chris', 'Cornell', 'Chris@Cooper.COM')
SELECT * FROM DUAL;

--2.4 UPDATE
UPDATE CUSTOMER  
SET FIRSTNAME='Robert', LASTNAME='Walker'
WHERE (FIRSTNAME = 'Aaron' AND LASTNAME='Mitchell');

UPDATE ARTIST
SET NAME='CCD'
WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003-06-1','yyyy,mm,dd') AND TO_DATE('2004-03-1','yyyy,mm,dd');

--2.7 DELETE
SELECT * FROM CUSTOMER ;

ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE INVOICE ADD CONSTRAINT FK_INVOICECUSTOMERID FOREIGN KEY (CUSTOMERID)
    REFERENCES CUSTOMER (CUSTOMERID) ON DELETE CASCADE;

ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE INVOICELINE ADD CONSTRAINT FK_INVOICELINEINVOICEID FOREIGN KEY (INVOICEID)
    REFERENCES INVOICE (INVOICEID) ON DELETE CASCADE;
    
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3 SQL FUNCTIONS

--3.1 SYSTEM DEFINED FUNCTIONS
SELECT CURRENT_TIMESTAMP(6) FROM DUAL;

SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
SELECT AVG(TOTAL) FROM INVOICE;

SELECT MAX(UNITPRICE) FROM TRACK;

--3.3 USER DEFINED SCALER FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
AS 
X NUMBER(4,2);
BEGIN
    SELECT AVG(UNITPRICE) INTO X FROM INVOICELINE;
    RETURN X;
END;
/
SELECT AVG_PRICE FROM DUAL;

--3.4 USER DEFINDE TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION AFTER_1968
RETURN SYS_REFCURSOR
AS DATA SYS_REFCURSOR;
BEGIN
    OPEN DATA FOR
    SELECT * FROM EMPLOYEE WHERE BIRTHDATE >TO_DATE('1968,12,31','YYYY,MM,DD');
    RETURN DATA;
END;
/
SELECT AFTER_1968 FROM DUAL;

--4 STORED PROCEDURES
--4.1 BASIC STORED PROCEDURE
CREATE OR REPLACE PROCEDURE SP_EMP_NAMES
AS EMP_FIRST VARCHAR(30);
    EMP_LAST VARCHAR(30);
    CURSOR EMP_FIRSTLAST IS (  SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE); 
BEGIN
  OPEN EMP_FIRSTLAST;
  LOOP FETCH EMP_FIRSTLAST INTO EMP_FIRST, EMP_LAST;
    DBMS_OUTPUT.PUT_LINE(EMP_FIRST||' '||EMP_LAST);
    EXIT WHEN EMP_FIRSTLAST%NOTFOUND;
    END LOOP;
END;
/
DECLARE
BEGIN
    SP_EMP_NAMES;
END;

--4.2 STORED PORCEDURE INUT PARAMETERS
CREATE OR REPLACE PROCEDURE UPDATE_PHONE(EMP_ID IN NUMBER, NEW_PHONE IN NUMBER)
AS
BEGIN
    UPDATE EMPLOYEE SET PHONE = NEW_PHONE WHERE EMP_ID = EMPLOYEEID;
END;
/
BEGIN 
    UPDATE_PHONE(2,1234567890);
END;

--4.2.2 MORE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE GET_BOSS(EMP_ID IN NUMBER)
AS BOSS NUMBER;
BEGIN
    SELECT REPORTSTO INTO BOSS FROM EMPLOYEE WHERE EMPLOYEEID=EMP_ID;
    DBMS_OUTPUT.PUT_LINE(BOSS);
END;
/
BEGIN
GET_BOSS(4);
END;

--4.3 STORED PROCEDURE WITH OUT PARAMETERS
CREATE OR REPLACE PROCEDURE CUST_INFO(GET_ID IN NUMBER, FNAME OUT VARCHAR2,
    LNAME OUT VARCHAR2, COMP_NAME OUT VARCHAR2)
AS FNAME VARCHAR2(30);
    LNAME VARCHAR2(30);
    COMP_NAME VARCHAR2(30);
    CURSOR CUSTOMER_INFO IS (  SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER 
    WHERE CUSTOMERID=GET_ID); 
BEGIN
     FETCH CUSTOMER_INFO INTO FNAME, LNAME, COMP_NAME;
     DBMS_OUTPUT.PUT_LINE(FNAME||' '||LANME||' '||COMP_NAME);
END;
/
BEGIN
    CUST_INFO(5);
END;

--5 TRANSACTIONS
CREATE OR REPLACE PROCEDURE REMOVE_INVOICE (INV_ID IN NUMBER)
AS
BEGIN    
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE DROP 
    CONSTRAINT FK_INVOICELINEINVOICEID';
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE ADD CONSTRAINT 
    FK_INVOICELINEINVOICEID FOREIGN KEY (INVOICEID) REFERENCES INVOICE 
    (INVOICEID) ON DELETE CASCADE'; 
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT;
END;
/
BEGIN
    REMOVE_INVOICE(5);
END;


--6 TRIGGERS
--6.1
CREATE OR REPLACE TRIGGER TR_INSERT_RECORD
AFTER INSERT ON EMPLOYEE 
FOR EACH ROW
BEGIN 
  DBMS_OUTPUT.PUT_LINE('Employee table updated');
END;
/

--6.2
CREATE OR REPLACE TRIGGER TR_UPDATE_RECORD
AFTER UPDATE ON ALBUM 
FOR EACH ROW
BEGIN 
   DBMS_OUTPUT.PUT_LINE('Album table updated');
END;
/

--6.3
CREATE OR REPLACE TRIGGER TR_DLETE_RECORD
AFTER DELETE ON CUSTOMER 
FOR EACH ROW
BEGIN 
   DBMS_OUTPUT.PUT_LINE('Customer table updated');
END;
/

--7 JOINS
--7.1 INNER JOIN
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE  
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER JOIN
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, 
INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT JOIN
SELECT artist.name, ALBUM.TITLE
FROM ALBUM
RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ALBUM.ARTISTID;

--7.4 CROSS JOIN
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM 
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;

--7.5SELF JOIN
SELECT A.FIRSTNAME AS FIRSTNAME1, B.FIRSTNAME AS
FIRSTNAME2, A.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.FIRSTNAME <> B.FIRSTNAME
AND A.REPORTSTO = B.REPORTSTO;




