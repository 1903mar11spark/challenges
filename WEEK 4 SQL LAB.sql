--2 SQL QUERIES
--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE UPPER(LASTNAME) = 'KING';
SELECT * FROM EMPLOYEE WHERE UPPER(FIRSTNAME) = 'ANDREW' OR UPPER(REPORTSTO) = NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3 INSERT INTO
--INSERT INTO GENRE
INSERT INTO GENRE 
VALUES (26, 'Kidz Bop');
INSERT INTO GENRE
VALUES(27, 'Disney');
/
--INSERT INTO EMPLOYEE
INSERT INTO EMPLOYEE
VALUES(9,'Watson','Rose', 'Accountant',1, TO_DATE('1989-01-04', 'yyyy-mm-dd'), TO_DATE('2011-07-04', 'yyyy-mm-dd'),'829 Fake st','Lethbridge','AB', 'Candana', 'T5K 2N1','+1(403)467-3512','+1(403)467-5321','rose@chinookcorp.com');
INSERT INTO EMPLOYEE
VALUES(10,'Fields','Debbie', 'Analyst',1, TO_DATE('1989-12-03', 'yyyy-mm-dd'), TO_DATE('2009-02-14', 'yyyy-mm-dd'),'123 Nowhere dr','Edmonon','AB', 'Candana', 'T5K 2N1','+1(780)429-7360','+1(780)427-53490','debbie@chinookcorp.com');
/
--INSERT INTO CUSTOMER
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, ADDRESS, CITY, COUNTRY, POSTALCODE,PHONE,EMAIL,SUPPORTREPID)
VALUES(60, 'Sara', 'Lance', '12 NoGo Ave', 'Paris','France', '75002', '+33 01 49 70 65 66', 'SaraLance21@yahoo.com',4);

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE,PHONE,EMAIL,SUPPORTREPID)
VALUES(61, 'Ella', 'Enchanted', '123 Wish Lane', 'Disnay','Florda','USA', '75002', '+1(781)453-8924', 'EllanEnchanted@yahoo.com',4);

--2.4 UPDATE
--UPDATE AARON MITCHELL IN CUSTOMER TO ROBERT WALTER
UPDATE CUSTOMER
SET FIRSTNAME='Robert' , LASTNAME='Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME='Mitchell';

--UPDATE NAME CREEDENCE CLEARWATER REVIVAL TO CCR IN ARTIST
UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

--2.5 LIKE
--BILLING ADDRESS LIKE 'T%' IN INVOICE
SELECT * FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
--INVOICE TOTAL BETWEEN 15 AND 50
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 20;

--EMPLOYEES HIGHED BETWEEN 2003-07-01 AND 2004-03-01
SELECT * FROM EMPLOYEE 
WHERE HIREDATE BETWEEN TO_DATE('2003-07-01', 'yyyy-mm-dd') AND TO_DATE('2004-03-01','yyyy-mm-dd');

--2.7 DELETE
--RECORD IN CUSTOMER NAUME IS ROBERT WALTER
--FIRST FIND ROBERT IN INVOICE LINE, THEN IN INVOICE, THEN FINALLY IN CUSTOMER
DELETE FROM INVOICELINE 
WHERE INVOICEID IN
    (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter'));
    
DELETE FROM INVOICE
WHERE CUSTOMERID IN 
    (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter');

DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3 SQL FUNCTIONS
--3.1 SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION CURRENT_TIME_FUNCTION
    RETURN TIMESTAMP
IS SYSTEM_TIME TIMESTAMP;
BEGIN
    SYSTEM_TIME :=CURRENT_TIMESTAMP;
    RETURN SYSTEM_TIME;
END;
--RETURNS THE LENGTH OF A NAME IN A MEDIATYPE TABLE
CREATE OR REPLACE FUNCTION MEDIATYPE_LENGTH
RETURN INTEGER
IS LENGHT_OF_NAME INTEGER;
BEGIN
    SELECT MAX(LENGTH(NAME)) INTO LENGHT_OF_NAME FROM MEDIATYPE;
    RETURN LENGHT_OF_NAME;
END;
--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
--AVERAGE TOTAL
CREATE OR REPLACE FUNCTION AVERAGE_INVOICE
RETURN FLOAT
IS AVG_TOTAL FLOAT;
BEGIN
    SELECT AGV(TOTAL) INTO AVG_TOTAL FROM INVOICE;
    RETURN AVG_TOTAL;
END;
--MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN FLOAT
IS EXPENSIVE_TRACK FLOAT;
BEGIN
    SELECT MAX(UNITPRICE) INTO EXPENSIVE_TRACK FROM TRACK;
    RETURN EXPENSIVE_TRACK;
END;
--3.3 SCALAR FUNCTIONS
--AVAGE PRICE OF INVOICELINE ITEMS FROM INVOICELINE TABLE
CREATE OR REPLACE FUNCTION AVERAGE_INVOICELINE
RETURN FLOAT
IS AVERAGE_ITEM FLOAT;
BEGIN
    SELECT AVG(UNTIPRICE) INTO AVERAGE_ITEM FROM INVOICELINE;
    RETURN AVERAGE_ITEM;
END;
--3.4 TABLE VALUED FUNCTIONS
--RETURNS ALL EMPLOYEES WHO ARE BORN AFTER 1968
CREATE OR REPLACE FUNCTION BORN_AFTER_1986
RETURN SYS_REFCURSOR
AS BORN_AFTER SYS_REFCURSOR;
BEGIN
    OPEN BORN_AFTER FOR
    SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, BIRTHDATE  FROM EMPLOYEE
        WHERE BIRTHDATE > TO_DATE('1968-21-31', 'yyyy-mm-dd');
    RETURN BORN_AFTER;
END;
--COMEBACK TO LATER
DECLARE
BORN_AFTER SYS_REFCURSOR;
SOME_ID EMPLOYEE.EMPLOYEEID%TYPE; 
SOME_FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
SOME_LASTNAME EMPLOYEE.LASTNAME%TYPE;
SOME_BIRTHDATE EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    BORN_AFTER:= BORN_AFTER_1986;
    LOOP
    FETCH BORN_AFTER INTO SOME_ID, SOME_FIRSTNAME, SOME_LASTNAME, SOME_BIRTHDATE;
    EXIT WHEN BORN_AFTER%NOTFOUND;          
    DBMS_OUTPUT.PUT_LINE('ID: ' ||SOME_ID||', FIRSTNAME: '||SOME_FIRSTNAME||', LASTNAME: '||SOME_LASTNAME||', BIRTHDATE'||SOME_BIRTHDATE);
    END LOOP;
    CLOSE BORN_AFTER;
END;

--4STORED PROCEDURES
--4.1 SLELECTS FIRST/LAST NAMES OF ALL THE EMPLOYEES
CREATE OR REPLACE PROCEDURE EMPLOYEE_NAMES(E_NAME OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN E_NAME  FOR SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

DECLARE
    NAMECURSOR SYS_REFCURSOR;
    FIRSTNAME VARCHAR(20);
    LASTNAME VARCHAR(20);
BEGIN
    EMPLOYEE_NAMES(NAMECURSOR);
    LOOP
        FETCH NAMECURSOR INTO FIRSTNAME, LASTNAME;
        EXIT WHEN NAMECURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('EMPOLYEE: '||FIRSTNAME||' '|| LASTNAME);
    END LOOP;
END;

--4.2 UPDATES PERSON INFORMATION OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE UDATE_EMPLOYEE(EM_ID IN NUMBER, EM_LASTNAME IN VARCHAR,EM_FIRSTNAME IN VARCHAR,  EM_ADDRESS IN VARCHAR,
                                       EM_CITY IN VARCHAR, EM_STATE IN VARCHAR, EM_COUNTRY IN VARCHAR, EM_ZIP IN VARCHAR, 
                                       EM_PHONE IN VARCHAR, EM_FAX IN VARCHAR, EM_EMAIL IN VARCHAR)
AS 
BEGIN
    UPDATE EMPLOYEE
    SET  LASTNAME=EM_LASTNAME, FIRSTNAME=EM_FIRSTNAME, ADDRESS=EM_ADDRESS, CITY=EM_CITY,
    STATE=EM_STATE, COUNTRY=EM_COUNTRY, POSTALCODE=EM_ZIP, PHONE=EM_PHONE, FAX=EM_FAX, EMAIL=EM_EMAIL
    WHERE EMPLOYEEID=EM_ID;
END;
/
--COME BACK TO LATER
EXEC UPDATE_EMPLOYEE(10, 'Smith', 'Jane', '123 NoWhere ave', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 429-7360', '+1(780) 427-5349', 'jane@chinookcorp.com');
SELECT * FROM EMPLOYEE WHERE EMPLOYEEID=10;

--RETURNS MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE MANAGER_OF_EMPOLEE(EM_ID IN NUMBER)
AS MANAGERID NUMBER;
BEGIN
    SELECT REPORTSTO INTO MANAGERID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EM_ID;
END;

--4.3 OUTPUT PARA
--RETURNS NAME AND COMPNAY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE CUSTOMER_COMPANY(CUSTOMERID IN NUMBER, CUSTOMER_FIRSTNAME OUT VARCHAR, CUSTOMER_LASTNAME OUT VARCHAR, CUSTOMER_COMP OUT VARCHAR)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY INTO CUSTOMER_FIRSTNAME, CUSTOMER_LASTNAME, CUSTOMER_COMP FROM CUSTOMER WHERE CUSTOMERID=CUSTOMERID;
END;
/

--5 TRANSACTIONS
-- CREATE A TRANSACTION THAT GIVEN A INVOICEDID WILL DELETE THAT INVOICE
CREATE OR REPLACE PROCEDURE DELETE_ID(INVOICE_ID IN NUMBER)
IS
INVOICE_EXISTS INTEGER;
BEGIN
    --CHECK THAT THIS BEAR IS CORRECTLY MATCHED TO THIS BEEHIVE
    SELECT INVOICE.INVOICEID INTO INVOICE_EXISTS 
    FROM INVOICE 
    WHERE INVOICE.INVOICEID = INVOICE_ID;
    DBMS_OUTPUT.PUT_LINE(INVOICE_EXISTS );
    --IF IT IS, AND HONEY_AMT > 0
    IF INVOICE_EXISTS > 0  THEN 
    DELETE INVOICEID WHERE INVOICEID=INVOICE_ID;
    END IF;
    ROLLBACK;  
END;

--6 TRIGGERS
--AFTER INSERT ON EMPLOYEE TABLE FIRED AFTER NEW RECORD IS INSERTED INTO TABLE
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT TR_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END;

--AFTER UPDATE ON ALBUM THAT FIRTES AFTER A ROW INSERTED IN THE TABLE
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER INSERT ON ALBUM--SPECIFY WHICH DML OPERATION, BEFORE/AFTER, AND TABLE
FOR EACH ROW
BEGIN
    SELECT TR_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
--AFTER DELETE ON CUSTOMER TABLE WHEN A ROW IS DELETED
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT TR_CUSTOMER_PK.NEXTVAL INTO :NEW.CUSTOMERID FROM DUAL;
END;

--7 JOINS
--7.1 INNER
--INNER JOIN BETWEEN CUSTOMER AND ORDERS 
SELECT C.CUSTOMERID, C.FIRSTNAME,C.LASTNAME
FROM CUSTOMER C
INNER JOIN INVOICE ON C.CUSTOMERID = INVOICE.CUSTOMERID;

--OUTER CUSTOMER INVOICE CUSTOMERID FIRST, LAST, INVOICEID, TOTAL
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, INVOICE.TOTAL
FROM CUSTOMER C
FULL JOIN INVOICE ON C.CUSTOMERID=INVOICE.CUSTOMERID;

--RIGHT ALBUM AND ARIST, ARIST NAME, TITLE
SELECT A.TITLE, ARTIST.NAME
FROM ALBUM A
RIGHT JOIN ARTIST ON A.ARTISTID=ARTIST.ARTISTID;

--CROSS ALBUM AND ARTIST SORTS BY ARIST NAME ASC ORDER
SELECT A.TITLE, ARTIST.NAME
FROM ALBUM A
CROSS JOIN ARTIST WHERE A.ARTISTID=ARTIST.ARTISTID ORDER BY ARTIST.NAME;

--7.5 SELF EMPLY TABLEING, ON THE REPORTSTO COLUMN
--E EMPLOYEE, B, MANAGER/BOSS
SELECT E.FIRSTNAME,E.LASTNAME, B.FIRSTNAME, B.LASTNAME
FROM EMPLOYEE E, EMPLOYEE B
WHERE B.EMPLOYEEID = E.REPORTSTO;




















