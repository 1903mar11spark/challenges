
-- SQL Queries--
-- 2.1- SELECT--
SELECT *
FROM EMPLOYEE;

SELECT *
FROM EMPLOYEE 
WHERE LASTNAME = 'King';

SELECT * 
FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY

SELECT *
FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM CUSTOMER 
ORDER BY CITY ASC;

--2.3 INSERT INTO

INSERT INTO GENRE 
VALUES(26, 'Party');

INSERT INTO GENRE
VALUES(27, 'Indie');

INSERT INTO EMPLOYEE 
VALUES (9, 'Garcia', 'Alan', 'Secretary', 6, TO_DATE('1970-03-25', 'yyyy-mm-dd'),TO_DATE('1990-05-11', 'yyyy-mm-dd'),'239 N street dr.', 'Weslaco','Tx','USA', 'T1H 1T8','+1 (443) 477-3158', '+1 (443) 477-8327', 'Alan@chinookcorp.com');

INSERT INTO EMPLOYEE 
VALUES (10, 'Tijerina', 'Alma', 'Bank Teller', 3, TO_DATE('1994-02-9', 'yyyy-mm-dd'),TO_DATE('2014-02-05', 'yyyy-mm-dd'),'239 N street dr.', 'Weslaco','Tx','USA', 'T1H 1T8','+1 (443) 477-3158', '+1 (443) 477-8327', 'Alan@chinookcorp.com');

INSERT INTO CUSTOMER
VALUES (60, 'Yahir','Briz', 'Tiki Taka', '123 N. Westgate dr.', 'Sao Paulo', 'TX','Brazil','78346','+1 (956) 3683-0040', '+1 (670) 253-2900','FcBarca@TikiTaka.com',2);

INSERT INTO CUSTOMER
VALUES (61, 'Ede','Flores', 'Tiki Taka', '321 N. Northgate dr.', 'Madrid', 'TX','Spain','78356','+1 (956) 353-0140', '+1 (670) 275-2264','FcReal@TikiTaka.com',3);

--2.4 UPDATE--

UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;

UPDATE ARTIST
SET NAME= 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE--

SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN--

SELECT *
FROM INVOICE
WHERE TOTAL > 15 AND TOTAL < 50;

SELECT *
FROM EMPLOYEE 
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--DELETE--



--3 SQL FUNCTIONS--
--3.1 SYSTEM DEFINED FUNCTIONS--

SELECT CURRENT_TIMESTAMP
FROM DUAL;


SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS--

SELECT AVG(TOTAL)
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM TRACK;

--3.3 USER DEFINED SCALAR FUNCTIONS

--4.0 STORED PROCEDURES--
--4.1 Basic stored procedures--
CREATE OR REPLACE PROCEDURE getEmployeeName
AS 
    FIRSTNAME VARCHAR2(50); 
    LASTNAME VARCHAR2(50);
    CURSOR EMP_FULLNAME IS (SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE);
        
BEGIN
    OPEN EMP_FULLNAME;
    LOOP
        FETCH EMP_FULLNAME INTO FIRSTNAME, LASTNAME;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
        EXIT WHEN EMP_FULLNAME%NOTFOUND;
    END LOOP;
END;
/
BEGIN
    getEmployeeName();
END;
/



--4.2 STORED PROCEDURES INPUT PARAMETERS--
--UPDATE EMPLOYEE UPDATE--
CREATE OR REPLACE PROCEDURE employeeUpdate (
EMPLOYEE_ID IN NUMBER,
EMPLOYEE_FIRSTNAME IN VARCHAR2,
EMPLOYEE_LASTNAME IN VARCHAR2,
EMPLOYEE_TITLE IN  VARCHAR2,
EMPLOYEE_REPORTSTO IN NUMBER,
EMPLOYEE_BIRTHDATE IN VARCHAR2,
EMPLOYEE_HIREDATE IN VARCHAR2,
EMPLOYEE_ADDRESS IN VARCHAR2,
EMPLOYEE_CITY IN VARCHAR2,
EMPLOYEE_STATE IN VARCHAR2,
EMPLOYEE_COUNTRY IN VARCHAR2,
EMPLOYEE_POSTALCODE IN VARCHAR2,
EMPLOYEE_PHONE IN VARCHAR2,
EMPLOYEE_FAX IN VARCHAR2,
EMPLOYEE_EMAIL IN VARCHAR2
)
AS
BEGIN
    UPDATE EMPLOYEE SET 
        EMPLOYEEID = EMPLOYEE_ID,
        LASTNAME = EMPLOYEE_LASTNAME,
        FIRSTNAME = EMPLOYEE_FIRSTNAME,
        TITLE = EMPLOYEE_TITLE,
        REPORTSTO = EMPLOYEE_REPORTSTO,
        BIRTHDATE = EMPLOYEE_BIRTHDATE,
        HIREDATE = EMPLOYEE_HIREDATE,
        ADDRESS = EMPLOYEE_ADDRESS,
        CITY = EMPLOYEE_CITY,
        STATE = EMPLOYEE_STATE,
        COUNTRY = EMPLOYEE_COUNTRY,
        POSTALCODE = EMPLOYEE_POSTALCODE,
        PHONE = EMPLOYEE_PHONE,
        FAX = EMPLOYEE_FAX,
        EMAIL = EMPLOYEE_EMAIL
    WHERE EMPLOYEE_ID = EMPLOYEEID;
END;
/
BEGIN
    employeeUpdate(1,'Moreira','Ronaldo','Legend Manager',1,'18-MAY-87','02-JUN-12','1234 N. Legend dr.','Brasilia', 'TX', 'Brazil','T3B 1U7','1 (780) 836-9984','1 (780) 836-9547','LegendForever@chinookcorp.com' );
END;
/
--4.2 RETURN MANAGERS--
CREATE OR REPLACE PROCEDURE returnManager(EMPLOYEE_ID IN NUMBER)
AS
    MANAGER_ID NUMBER;
BEGIN
    SELECT REPORTSTO INTO MANAGER_ID FROM EMPLOYEE WHERE EMPLOYEEID = EMPLOYEE_ID;
    DBMS_OUTPUT.PUT_LINE(MANAGER_ID); 
END;
/
BEGIN
    returnManager(2);
END;
/
--4.3 Stored Procedure Output Parameters--

CREATE OR REPLACE PROCEDURE getCustomerAndCompany (
    CUSTOMER_ID IN NUMBER,
    FIRST_NAME OUT VARCHAR2,
    LAST_NAME OUT VARCHAR2,
    CUSTOMER_COMPANY OUT VARCHAR2)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY 
    INTO FIRST_NAME, LAST_NAME, CUSTOMER_COMPANY 
    FROM CUSTOMER 
    WHERE CUSTOMERID = CUSTOMER_ID;
END;
/
DECLARE
    FIRST_NAME VARCHAR2(30);  
    LAST_NAME VARCHAR2(30);
    CUSTOMER_COMPANY VARCHAR2(30);
BEGIN
    getCustomerAndCompany(3, FIRST_NAME, LAST_NAME, CUSTOMER_COMPANY);
    DBMS_OUTPUT.PUT_LINE('THE CUSTOMER IS: ' || FIRST_NAME || ' LAST NAME: ' || LAST_NAME || 'AND WORKS AT '|| CUSTOMER_COMPANY);
END;


--5.0 TRANSACTIONS--

--6.0 TRIGGERS--
--6.1 AFTER/FOR--
CREATE OR REPLACE TRIGGER TRIGGER1
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('SOMETHING');
END;
/

CREATE OR REPLACE TRIGGER TRIGGER2
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('TRIGGER2');
END;
/

CREATE OR REPLACE TRIGGER TRIGGER3
AFTER DELETE ON CUSTOMER
BEGIN 
    DBMS_OUTPUT.PUT_LINE('TRIGGER3');
END;
 /

--7.0 JOINS--
--7.1 INNER JOIN--

SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID
FROM CUSTOMER C
INNER JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;

--7.2 OUTER JOIN--

SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CUSTOMER C
FULL JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;

--7.3 RIGHT JOIN--

SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4 CROSS JOIN--
SELECT *
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY ARTIST.NAME ASC;
--7.5 SELF JOIN--

SELECT EMP.EMPLOYEEID, EMP.FIRSTNAME, EMP.LASTNAME, EMP.REPORTSTO,B.FIRSTNAME,B.LASTNAME
FROM EMPLOYEE EMP
LEFT JOIN EMPLOYEE B ON EMP.REPORTSTO = B.EMPLOYEEID;

