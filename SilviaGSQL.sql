--2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT * FROM CUSTOMER ORDER BY CITY ASC;

--2.3
INSERT INTO GENRE VALUES (26,'JROCK');
INSERT INTO GENRE VALUES (27, 'JPOP');

INSERT INTO EMPLOYEE VALUES (9, 'Keyligth', 'Xion', 'IT Staff', 6, TO_DATE ('30/05/1999','DD-MM-YY'), TO_DATE ('30/05/2018','DD-MM-YY'), '1313 Nobody ave', 'Twiligth Town', 'TX','USA',75020 , '+1 (956) 131 1414' , '+1 (403) 467-8772', 'Xion@chinookcorp.com');
INSERT INTO EMPLOYEE VALUES (10, 'Shado', 'Roxas', 'Data Entry', 6, TO_DATE ('07/05/1998','DD-MM-YY'), TO_DATE ('23/05/2018','DD-MM-YY'), '1314 Nobody ave', 'Twiligth Town', 'TX','USA',75020 , '+1 (956) 713 5687' , '+1 (403) 467-8775', 'Roxas@chinookcorp.com');

INSERT INTO CUSTOMER VALUES (60,'John','Wick', 'Shane Corp', '1167 Frontage Ave', 'Tampa', 'FL', 'USA', '33601', '+1 (813) 956 6666','+1 (813) 854 7269 ext 26','JWick@shanecorp.com', 6);
INSERT INTO CUSTOMER VALUES (61,'Shane','Shanson', 'Shane Corp', '1167 Frontage Ave', 'Tampa', 'FL', 'USA', '33601', '+1 (813) 562 ','+1 (813) 854 7269 ext 37','SShanson@shanecorp.com', 6);

--2.4
UPDATE CUSTOMER SET FIRSTNAME = 'Robert' , LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--2.5
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE ('01/06/2003','DD-MM-YY') AND TO_DATE ('01/03/2004','DD-MM-YY');

--2.7
DELETE FROM INVOICELINE 
WHERE INVOICEID IN
(SELECT INVOICEID
    FROM INVOICE WHERE CUSTOMERID =32);
DELETE FROM INVOICE WHERE CUSTOMERID =32;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3

--3.1

SELECT SYSTIMESTAMP FROM DUAL;

SELECT LENGTH('NAME') AS LENGTHOFNAMES
 FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL)
FROM INVOICE;

SELECT MAX(UNITPRICE) AS MOST_EXPENSIVE
FROM TRACK;

--3.3
SELECT AVG(UNITPRICE)
FROM INVOICELINE;

--3.4
SELECT * FROM EMPLOYEE WHERE BIRTHDATE > '01-JAN-68';

--4.1
CREATE OR REPLACE PROCEDURE SP_FULL_NAME(E_EMPLOYEEID IN INTEGER, E_FIRSTNAME OUT VARCHAR2, E_LASTNAME OUT VARCHAR2)
AS
BEGIN
    SELECT 
        FIRSTNAME, LASTNAME
    INTO
        E_FIRSTNAME, E_LASTNAME
    FROM 
        EMPLOYEE 
    WHERE
        EMPLOYEEID = E_EMPLOYEEID;
END;
DECLARE
    E_FIRSTNAME VARCHAR2(20 BYTE);
    E_LASTNAME VARCHAR2 (20 BYTE);
    E_EMPLOYEEID INTEGER:= 1;
BEGIN
    FOR E_EMPLOYEEID IN 1..10
    LOOP
   SP_FULL_NAME(E_EMPLOYEEID, E_FIRSTNAME, E_LASTNAME);
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: ' || E_FIRSTNAME || ' LAST NAME: ' || E_LASTNAME);
    END LOOP;
END;
 
--4.2
CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE(
    E_ID IN NUMBER, 
    E_LASTNAME IN VARCHAR2, 
    E_FIRSTNAME IN VARCHAR2,
    E_BIRTHDATE IN DATE, 
    E_HIREDATE IN DATE, 
    E_ADDRESS IN VARCHAR2,
    E_CITY IN VARCHAR2, 
    E_STATE IN VARCHAR2, 
    E_COUNTRY IN VARCHAR2, 
    E_POSTALCODE IN VARCHAR2,
    E_PHONE IN VARCHAR2,
    E_FAX IN VARCHAR2,
    E_EMAIL IN VARCHAR2)
IS
 E_EXISTS INTEGER;
BEGIN
    --CHECK IF EMPLOYEE ID EXISTS
    SELECT COUNT(EMPLOYEE.EMPLOYEEID) INTO E_EXISTS
    FROM EMPLOYEE
    WHERE EMPLOYEE.EMPLOYEEID = E_ID;
    
    IF E_EXISTS > 0 THEN
    UPDATE EMPLOYEE SET EMPLOYEEID = E_ID , 
                        LASTNAME = E_LASTNAME, 
                        FIRSTNAME = E_FIRSTNAME,
                        BIRTHDATE = E_BIRTHDATE ,
                        HIREDATE = E_HIREDATE,
                        ADDRESS = E_ADDRESS ,
                        CITY = E_CITY ,
                        STATE = E_STATE ,
                        COUNTRY = E_COUNTRY ,
                        POSTALCODE = E_POSTALCODE,
                        PHONE = E_PHONE ,
                        FAX = E_FAX ,
                        EMAIL = E_EMAIL
    WHERE EMPLOYEEID = E_ID;
    END IF;
END;
/
DECLARE 
LAST_NAME VARCHAR2(20 BYTE) := 'Twili';
FIRST_NAME VARCHAR2(20 BYTE):= 'Roxas';
DOB VARCHAR2(20 BYTE):= '06-MAY-98';
DOH VARCHAR2(20 BYTE):= '23-MAY-18';
ADDRESS VARCHAR2(70 BYTE):= '1113 Oblivion ave';
CITY VARCHAR2(40 BYTE):='Twiligth Town';
ESTATE VARCHAR2(40 BYTE):='TX';
COUNTRY VARCHAR2(40 BYTE):= 'USA';
POSTALCODE VARCHAR2(10 BYTE):= '75021';
PHONE VARCHAR2(24 BYTE):= '+1(956) 713 5687';
FAX VARCHAR(24 BYTE):= '+1 (403) 467-8775';
EMAIL VARCHAR(60 BYTE):='Roxas@chinookcorp.com';

BEGIN
SP_UPDATE_EMPLOYEE(10, LAST_NAME, FIRST_NAME, DOB, DOH, ADDRESS, CITY, ESTATE,COUNTRY ,POSTALCODE ,PHONE , FAX, EMAIL);
END;

--STORED PROCEDURE THAT RETURNS THE MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE SP_MANAGER_EMPLOYEE(E_ID IN INTEGER,E_REPORTS OUT NUMBER, E_FIRSTNAME OUT VARCHAR2, E_LASTNAME OUT VARCHAR2)
 IS
 E_HAS_MANAGER INTEGER;
BEGIN
    --CHECK IF EMPLOYEE HAS A MANAGER TO REPORT TO
    SELECT COUNT(EMPLOYEE.REPORTSTO) INTO  E_HAS_MANAGER
    FROM EMPLOYEE
    WHERE EMPLOYEEID = E_ID 
    AND EMPLOYEE.REPORTSTO IS NOT NULL;
    
    IF E_HAS_MANAGER > 0 THEN
        SELECT REPORTSTO INTO E_REPORTS
        FROM EMPLOYEE 
        WHERE EMPLOYEEID = E_ID;
    
        SELECT FIRSTNAME, LASTNAME 
         INTO E_FIRSTNAME, E_LASTNAME
        FROM EMPLOYEE WHERE EMPLOYEEID = E_REPORTS;
    END IF;
END;
/
DECLARE 
E_ID INTEGER:=9;
 E_FIRSTNAME VARCHAR2(20 BYTE);
 E_LASTNAME VARCHAR2(20 BYTE);
 E_REPORTS NUMBER;
BEGIN
   SP_MANAGER_EMPLOYEE(E_ID, E_REPORTS, E_FIRSTNAME, E_LASTNAME);
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE: ' || E_ID ||' reports to manager: ' || E_FIRSTNAME || ' ' || E_LASTNAME);
END;


--4.3
CREATE OR REPLACE PROCEDURE SP_CUSTOMER_COMPANY(E_CUSTOMERID IN NUMBER, E_FIRSTNAME OUT VARCHAR2,E_LASTNAME OUT VARCHAR2,E_COMPANY OUT VARCHAR2)
IS
BEGIN
    SELECT FIRSTNAME, LASTNAME,COMPANY
    INTO E_FIRSTNAME, E_LASTNAME, E_COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID = E_CUSTOMERID;
END;
/
DECLARE
    E_FIRSTNAME VARCHAR2(40 BYTE);  
    E_LASTNAME VARCHAR2(20 BYTE);
    E_COMPANY VARCHAR(80 BYTE);
BEGIN
    SP_CUSTOMER_COMPANY(19, E_FIRSTNAME, E_LASTNAME, E_COMPANY);
    DBMS_OUTPUT.PUT_LINE('THE CUSTOMER IS: ' || E_FIRSTNAME || ' LAST NAME: ' || E_LASTNAME || ' AND CURRENTLY WORKING AT: '|| E_COMPANY);
END;


--5.0
CREATE OR REPLACE PROCEDURE SP_INVOICE_DEL(I_INVOICEID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 
        'ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    EXECUTE IMMEDIATE 
        'ALTER TABLE INVOICELINE ADD CONSTRAINT FK_INVOICELINEINVOICEID
        FOREIGN KEY (INVOICEID) REFERENCES INVOICE (INVOICEID) ON DELETE CASCADE';
    DELETE FROM
        INVOICE
    WHERE
        INVOICEID = I_INVOICEID;
END;
/
BEGIN
    SP_INVOICE_DEL(55);
END;
/

--6.1
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE 
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger has been fired!');
END;
/

--AFTER UPDATE TRIGGER ON ALBUM TABLE FIRED AFTER A ROW HAS BEEN UPDATED FROM THE TABLE
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger has been fired!');
END;
/

--AFTER DELETE TRIGGER ON CUSTOMER TABLE FIRED AFTER A ROW HAS BEEN DELETED FROM THE TABLE
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON ALBUM 
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger has been fired!');
END;
/

--7.1
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME
 FROM INVOICE
 INNER JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
 
 --7.2
 SELECT INVOICE.INVOICEID, INVOICE.TOTAL, CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME
  FROM CUSTOMER
  FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3
SELECT ALBUM.TITLE, ARTIST.NAME
 FROM ALBUM
 RIGHT JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID;
 
 --7.4
 SELECT ALBUM.TITLE, ARTIST.NAME
  FROM ALBUM
  CROSS JOIN ARTIST
   ORDER BY NAME ASC;
   
--7.5
SELECT E1.FIRSTNAME AS FIRSTNAME1, E2.FIRSTNAME AS FIRSTNAME2,
 E1.LASTNAME AS LASTNAME1, E2.LASTNAME AS LASTNAME2
 FROM EMPLOYEE E1, EMPLOYEE E2
  WHERE E1.REPORTSTO = E2.REPORTSTO;
  
 

