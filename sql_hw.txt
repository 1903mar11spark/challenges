--Week 4: SQL Homework ( 4/3/19 - 4/8/19 )
--2.1 Select
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' OR REPORTSTO = NULL;

--2.2 ORDER BY
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT * FROM CUSTOMER
ORDER BY CITY ASC;

--2.3
SELECT * FROM GENRE;

INSERT INTO GENRE
VALUES (26,'RIDDIM');

INSERT INTO GENRE
VALUES (27, 'DRUM N BASS');


SELECT * FROM EMPLOYEE;

INSERT INTO employee (EMPLOYEEID,LASTNAME, FIRSTNAME, TITLE )
VALUES (9,'Louis','Germy','Trainee');

INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (10, 'Shank', 'Slim', 'Trainee', null, '1920 Heritage Grove Circle', 'Tallahassee', 'FL', 'United States', '32304', '+1 (321) 960-6036', null, 'gfl14@my.fsu.edu');

INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) 
VALUES (60, 'Doe', 'John', 'YOLO', '215 West College Ave', 'Tallahssee', 'FL', 'US', '32304-000', null, ' (321) 850-6464', 'johnd@yolo.com', 3);

INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) 
VALUES (61, 'Leach', 'Bobby', 'Campus Recreation', '118 Varsity Way', 'Tallahssee', 'FL', 'US', '32304-000', null, ' (850) 645-4444', 'bobbyl@fsu.campusrec.com', 3);


--2.4
SELECT * FROM CUSTOMER;

UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walker'
WHERE CUSTOMERID = 32;

SELECT * FROM ARTIST;

UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = 76;

--2.5
select * from invoice;

SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';


--2.6
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';


--2.7
DELETE FROM INVOICELINE WHERE INVOICEID = 290 OR INVOICEID = 268 OR INVOICEID = 245 OR INVOICEID = 342 OR INVOICEID = 50 OR INVOICEID = 61 OR INVOICEID = 116;
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walker';


--3.1
SELECT CURRENT_TIMESTAMP
FROM DUAL;



SELECT LENGTH(NAME) 
FROM MEDIATYPE;


--3.2
--3.2.1
CREATE OR REPLACE FUNCTION THEAVG
RETURN NUMBER AS 
THENUM NUMBER;
BEGIN

SELECT AVG(TOTAL)
INTO THENUM
FROM INVOICE;
RETURN THENUM;

END;

--3.2.2
SELECT MAX(UNITPRICE)
  FROM TRACK;


--3.3
CREATE OR REPLACE FUNCTION THEAVG
RETURN NUMBER IS
Z NUMBER;
BEGIN 
SELECT AVG(UNITPRICE) into Z 
   FROM INVOICELINE; 
    
   RETURN Z; 
END;

--TEST
DECLARE
MAX_NUM NUMBER;
BEGIN
    MAX_NUM := THEAVG;
    DBMS_OUTPUT.PUT_LINE('MAX: '||MAX_NUM);
END;

--3.4
CREATE OR REPLACE FUNCTION EMP_AGE
RETURN SYS_REFCURSOR
IS 
AGE SYS_REFCURSOR;
BEGIN
    OPEN AGE FOR
    SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, BIRTHDATE
    FROM EMPLOYEE
    WHERE BIRTHDATE > '12-DEC-68';
    RETURN AGE;
END;


--4.1
CREATE OR REPLACE PROCEDURE FNL(LAST_NAME IN  EMPLOYEE.LASTNAME%TYPE,FIRST_NAME IN  EMPLOYEE.FIRSTNAME%TYPE, DETAILS OUT SYS_REFCURSOR)
AS BEGIN 
OPEN DETAILS FOR
SELECT LASTNAME, FIRSTNAME
FROM EMPLOYEE ;
END FNL;

--TEST FNL
DECLARE
X SYS_REFCURSOR;
FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE;
LAST_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
FNL(LAST_NAME, FIRST_NAME, X);
LOOP
FETCH X INTO LAST_NAME,FIRST_NAME;
EXIT WHEN X%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('USER:' || LAST_NAME || ', ' || FIRST_NAME);
END LOOP;
END;


--4.2
--UPDATES PERSONAL INFO OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE PERSONAL(E_ID IN  EMPLOYEE.EMPLOYEE%TYPE,ADDY IN  EMPLOYEE.ADDRESS%TYPE)
IS BEGIN

UPDATE EMPLOYEE SET ADDRESS = ADDY  WHERE EMPLOYEEID = E_ID;
COMMIT;
END;

--RETURNS MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE BOSS(E_ID IN  EMPLOYEE.EMPLOYEEID%TYPE)
IS 
THE_BOSS EMPLOYEE.REPORTSTO%TYPE;
NOT_BOSS EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
SELECT REPORTSTO, FIRSTNAME
INTO THE_BOSS, NOT_BOSS
FROM EMPLOYEE 
WHERE EMPLOYEEID = E_ID;
DBMS_OUTPUT.PUT_LINE(NOT_BOSS || ' '||  'REPORTS TO: '|| THE_BOSS);
END;

--4.3
CREATE OR REPLACE PROCEDURE CUST(C_ID IN CUSTOMER.CUSTOMERID%TYPE, INFO OUT SYS_REFCURSOR)
IS 
THE_CUSTFN CUSTOMER.FIRSTNAME%TYPE;
THE_CUSTLN CUSTOMER.LASTNAME%TYPE;
THE_CMP CUSTOMER.COMPANY%TYPE;
BEGIN
OPEN INFO FOR 
SELECT FIRSTNAME, LASTNAME, COMPANY
INTO THE_CUSTFN, THE_CUSTLN, THE_CMP
FROM CUSTOMER
WHERE CUSTOMERID = C_ID;

END CUST;

--TEST 4.3
DECLARE
X SYS_REFCURSOR;
CUST_FNAME CUSTOMER.FIRSTNAME%TYPE;
CUST_LNAME CUSTOMER.LASTNAME%TYPE;
CMP  CUSTOMER.COMPANY%TYPE;
BEGIN
CUST(11, X);
FETCH X INTO CUST_FNAME, CUST_LNAME, CMP;
IF CMP = NULL THEN
CMP := 'NOBODY';
END IF;
--EXIT WHEN X%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' || CUST_FNAME || ' ' || CUST_LNAME || ' WORKS FOR: ' || CMP);

END;


--5.0
CREATE OR REPLACE PROCEDURE TRANS (I_ID in  INVOICE.INVOICEID%TYPE)
IS
BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE || InvoiceLine || DROP CONSTRAINT || FK_InvoiceLineInvoiceId';
DELETE FROM INVOICELINE WHERE INVOICEID = I_ID;
DELETE FROM INVOICE WHERE INVOICEID = I_ID;

COMMIT;
END;


--6.0 Triggers
--AFTER INSERT ON EMPLOYEE
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER INSERT ON EMPLOYEE

BEGIN

DBMS_OUTPUT.PUT_LINE('After Insert Trigger, Triggered.');
END;

--AFTER UPDATE ON ALBUM
CREATE OR REPLACE TRIGGER AFTER_UPDATE
AFTER INSERT ON ALBUM
FOR EACH ROW
WHEN (NEW.ALBUMID > 0)

BEGIN

DBMS_OUTPUT.PUT_LINE('After Update Trigger, Triggered.');
END;

--AFTER DELETE ON CUSTOMER
CREATE OR REPLACE TRIGGER AFTER_DELETE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
WHEN (NEW.CUSTOMERID > 0)

BEGIN

DBMS_OUTPUT.PUT_LINE('After Delete Trigger, Triggered.');
END;

--7.0 JOINS
--INNER JOIN
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER 
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID;

--OUTER JOIN
SELECT CUSTOMER.CUSTOMERID,CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME,INVOICEID,TOTAL
FROM CUSTOMER 
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--RIGHT JOIN
SELECT ARTIST.NAME,ALBUM.TITLE
FROM ARTIST 
RIGHT JOIN ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--CROSS JOIN
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM CROSS JOIN ARTIST
ORDER BY ARTIST.NAME ASC;


--SELF JOIN
SELECT A.EMPLOYEEID AS "E_ID", A.FIRSTNAME AS "E_Name",
B.EMPLOYEEID AS "BOSS_ID", B.FIRSTNAME AS "BOSS_Name"
FROM EMPLOYEE A, EMPLOYEE B 
WHERE A.REPORTSTO = B.EMPLOYEEID;