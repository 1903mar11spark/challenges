
--2.1
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
/
--2.2
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
/
--2.3
INSERT INTO GENRE
VALUES (26, 'Romantic Comedy');
INSERT INTO GENRE
VALUES (27, 'Symphonic Rock');

INSERT INTO EMPLOYEE
VALUES (9, 'Kraft', 'Lawrence', 'Merchant', 6 , TO_DATE('17/12/2015', 'DD/MM/YYYY') , TO_DATE('12/03/2019', 'DD/MM/YYYY') , '4520 Oitsu Lane' , 'Pasole' , 'AB' , 'Canada' , 'T5K 2N4' , '+1 (780) 428-9482', '+1 (780) 428-3457', 'thisTookWayTooLong@gmail.com');
INSERT INTO EMPLOYEE
VALUES (10, 'W', 'Holo', 'Boss', 6 , TO_DATE('17/12/2015', 'DD/MM/YYYY') , TO_DATE('12/03/2019', 'DD/MM/YYYY') , '4520 Oitsu Lane' , 'Pasole' , 'AB' , 'Canada' , 'T5K 2N4' , '+1 (780) 428-9482', '+1 (780) 428-3457', 'thisTookWayTooLong@gmail.com');
/

--2.4
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';
/
--2.5
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
/
--2.6
SELECT * FROM INVOICE 
WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE 
WHERE HIREDATE BETWEEN TO_DATE('01/06/2003', 'DD/MM/YYYY')AND TO_DATE('01/03/2004', 'DD/MM/YYYY');
/

--2.7
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
/
--3.1
SELECT LOCALTIMESTAMP
FROM DUAL;

SELECT LENGTH("NAME")
FROM MEDIATYPE;
/


--3.2
SELECT AVG(TOTAL) 
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM TRACK;
/
--3.3
SELECT AVG(UNITPRICE) AS INVOICELINE
FROM INVOICELINE;
/
--3.4
SELECT * 
FROM EMPLOYEE
WHERE BIRTHDATE >= '01 Jan 1968'; 
/
--4.1
CREATE OR REPLACE PROCEDURE SP_SELECT_NAMES
IS 
    E_FIRSTNAME VARCHAR2(30);
    E_LASTNAME VARCHAR2(30);
    CURSOR E_FIRSTLAST IS (SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE);
BEGIN  
    OPEN E_FIRSTLAST;
    LOOP
        FETCH E_FIRSTLAST INTO E_FIRSTNAME, E_LASTNAME;
        DBMS_OUTPUT.PUT_LINE(E_FIRSTNAME || ' ' || E_LASTNAME);
        EXIT WHEN E_FIRSTLAST%NOTFOUND;
    END LOOP;
       
END;
 
BEGIN
SP_SELECT_NAMES();
END;
/
--4.2
CREATE OR REPLACE PROCEDURE E_UPDATING (E_ID IN NUMBER)
IS
BEGIN
        UPDATE EMPLOYEE SET TITLE = 'STUFF' WHERE E_ID = EMPLOYEEID;
END;

BEGIN
    E_UPDATING(10);
END;
/
CREATE OR REPLACE PROCEDURE SP_GET_MAN
IS
    CURSOR E_EMPLOYER IS (SELECT EMPLOYEEID, REPORTSTO FROM EMPLOYEE);
    M_ID NUMBER;
    E_ID NUMBER;
BEGIN    
    OPEN E_EMPLOYER;
    LOOP
        FETCH E_EMPLOYER INTO E_ID, M_ID;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE: ' || E_ID || ' MANAGER: ' || M_ID);
        EXIT WHEN E_EMPLOYER%NOTFOUND;
    END LOOP;
       
END;
        
BEGIN
SP_GET_MAN();
END; 
/
--4.3
CREATE OR REPLACE PROCEDURE SP_NAME_CO(C_ID IN NUMBER)
IS
    C_FIRSTNAME VARCHAR2(40);
    C_COMPANY VARCHAR2(80);
BEGIN
    SELECT FIRSTNAME, COMPANY INTO C_FIRSTNAME, C_COMPANY FROM CUSTOMER WHERE CUSTOMERID = C_ID;
    DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' || C_ID || ' COMPANY: ' || C_COMPANY || ' NAME: ' || C_FIRSTNAME);
END;

BEGIN
SP_NAME_CO(1);
END;

--6.1
CREATE OR REPLACE TRIGGER AFTER_NEW_REC
AFTER INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ADDED');
END;
/

CREATE OR REPLACE TRIGGER UPDATE_ALBUM
AFTER INSERT ON ALBUM FOR EACH ROW
BEGIN
        DBMS_OUTPUT.PUT_LINE('LBUM UPDATED');
END;
/

CREATE OR REPLACE TRIGGER AFTER_CUSTOMER_DELETE
AFTER DELETE ON CUSTOMER FOR EACH ROW
BEGIN
        DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETED');
END;
/

--7.1
SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID
    FROM CUSTOMER C JOIN INVOICE I
    ON C.CUSTOMERID = I.CUSTOMERID;
/

--7.2
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
    FROM CUSTOMER C FULL JOIN INVOICE I
    ON C.CUSTOMERID = I.CUSTOMERID;

--7.3
SELECT AR.NAME, A.TITLE
    FROM ALBUM A RIGHT JOIN ARTIST AR
    ON A.ARTISTID = AR.ARTISTID;

--7.4
SELECT *
    FROM ALBUM , ARTIST 
    ORDER BY NAME;

--7.5
SELECT A.EMPLOYEEID, A.FIRSTNAME, A.LASTNAME, A.REPORTSTO, B.FIRSTNAME, 
        B.LASTNAME, B.REPORTSTO
    FROM EMPLOYEE A, EMPLOYEE B
    WHERE A.REPORTSTO = B.REPORTSTO;

