--1. Setting Up Oracle Chinhook

SELECT COUNT (*) FROM PLASTLISTTRACK;

--2. SQL Queries 

--2.1 Select

SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 Order By

SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 Insert Into

INSERT INTO GENRE (GENREID, NAME)
VALUES (26, 'Indie Rock');
/
INSERT INTO GENRE (GENREID, NAME)
VALUES (27, 'Dubstep');
/

INSERT INTO EMPLOYEE VALUES (9, 'Flynn', 'Shane', 'ShaneCorp', 1, TO_DATE('27-JUN-95', 'dd-mon-yy'), TO_DATE('04-MAY-18','dd-mon-yy'), '6012 Avalon Drive', 'Elkridge', 'Maryland', 'United States', 21075, '+1 (301) 395-9522', '+1 (301) 395-9522', 'flynn@shancecorp.com');
/
INSERT INTO EMPLOYEE VALUES (10, 'Padilla', 'Shane', 'ShaneCorp', 1, TO_DATE('10-MAY-95', 'dd-mon-yy'), TO_DATE('04-MAY-18', 'dd-mon-yy'), '5213 Padilla Drive', 'Dallas', 'Texas', 'United States', 21076, '+1 (222) 222-2222', '+1 (222) 222-2222', 'padilla@chanecorp.com');
/

INSERT INTO CUSTOMER VALUES (60, 'John', 'Jones', 'Revature', '97619 Address Court', 'Tampa', 'FL', 'USA', 12345, '+1 (401) 596-1672', '+1 (401) 596-1672', 'wishmynamewasshane@notshane.com', 3);
/
INSERT INTO CUSTOMER VALUES (61, 'Jeff', 'Smith', 'Microsoft', '12324 Address Drive', 'Tampa', 'FL', 'USA', 12345, '+1 (301) 576-0978', '+1 (301) 576-0978', 'alsowishmynamewasshane@notshane.com', 3);
/

--2.4 Update


UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE CUSTOMERID = 32;
/
UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--2.5 Like 

SELECT * 
FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 Between

SELECT * 
FROM INVOICE 
WHERE TOTAL BETWEEN 15 AND 30;

SELECT *
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7 Delete
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

DELETE 
FROM CUSTOMER
WHERE CUSTOMERID= 32;

--3.1
SELECT SESSIONTIMEZONE, CURRENT_TIMESTAMP FROM DUAL;
/
SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL)
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM TRACK;

--3.3
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS 
X NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO X
    FROM INVOICELINE;
    RETURN X;
END;
/

DECLARE
    Y NUMBER;
BEGIN
    Y := AVG_PRICE;
    DBMS_OUTPUT.PUT_LINE(Y);
END;
/

--3.4

CREATE OR REPLACE FUNCTION EMP_AGE
RETURN SYS_REFCURSOR
IS 
AGE SYS_REFCURSOR;
BEGIN
    OPEN AGE FOR
    SELECT EMPLOYEEID, LASTNAME, FIRSTNAME, BIRTHDATE
    FROM EMPLOYEE
    WHERE BIRTHDATE > '12-DEC-68';
    RETURN AGE;
END;
/

DECLARE
AGE SYS_REFCURSOR;
SOME_ID EMPLOYEE.EMPLOYEEID%TYPE;
SOME_LN EMPLOYEE.LASTNAME%TYPE;
SOME_FN EMPLOYEE.FIRSTNAME%TYPE;
SOME_BD EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    AGE := EMP_AGE;
    LOOP
    FETCH AGE INTO SOME_ID, SOME_LN, SOME_FN, SOME_BD;
    EXIT WHEN AGE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: '||SOME_ID||', LASTNAME: '||SOME_LN||', FIRSTNAME: '||SOME_FN||', BIRTHDAY:'||SOME_BD);
    END LOOP;
    CLOSE AGE;
END;
/

--4.1
CREATE OR REPLACE PROCEDURE SP_GET_EMPNAMES (NAMES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN NAMES FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

DECLARE
    NAMES SYS_REFCURSOR;
    SOME_FIRSTN EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTN EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SP_GET_EMPNAMES(NAMES);
    LOOP
    FETCH NAMES INTO SOME_FIRSTN, SOME_LASTN;
    EXIT WHEN NAMES%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN);
    END LOOP;
    CLOSE NAMES;
END; 
/
--4.2

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE (EMPLOYEE_ID IN NUMBER, SOME_FN IN VARCHAR2, SOME_LN IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = SOME_LN, FIRSTNAME = SOME_FN
    WHERE EMPLOYEE = EMPLOYEE_ID;
    COMMIT;
END; 
/

CREATE OR REPLACE PROCEDURE SP_GET_MANAGER (EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER)
IS 
BEGIN
    SELECT REPORTSTO
    INTO MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
END;


--4.3
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER (CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    SOME_FIRSTN CUSTOMER.FIRSTNAME%TYPE;
    SOME_LASTN CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    SP_GET_CUSTOMER(CUST);
    LOOP
    FETCH CUST INTO SOME_FIRSTN, SOME_LASTN, SOME_COMP;
    EXIT WHEN CUST%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN||', COMPANY: '||SOME_COMP);
    END LOOP;
    CLOSE CUST;
END; 
/

--5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/




--6.1
--NOT ALLOWED TO MAKE THE SEQUENCE 
CREATE SEQUENCE SQ.EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ.EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END; 
/

CREATE SEQUENCE SQ_ALBUM_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_CUSTOMER_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SQ_CUSTOMER_PK.NEXTVAL INTO :NEW.CUSTOMERID FROM DUAL;
END;
/

--7.1

SELECT LASTNAME, FIRSTNAME, INVOICEID 
FROM CUSTOMER 
INNER JOIN INVOICE 
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.2

SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.3

SELECT NAME, TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4

SELECT NAME
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;

--7.5

SELECT *--A.EMPLOYEEID, B.EMPLOYEEID, A.LASTNAME, B.LASTNAME, A.TITLE, B.TITLE
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON B.EMPLOYEEID = A.REPORTSTO;
