------SECTION 2: SQL QUERIES------

--2.1 SELECT--

SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY--

SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3 INSERT INTO--

INSERT ALL
INTO GENRE
VALUES (26, 'Mystery')
INTO GENRE 
VALUES (27, 'Running')
SELECT * FROM DUAL;

INSERT ALL
INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) 
VALUES (9,'Potter', 'Harry', 'Wizard', TO_DATE('1990-07-30', 'yyyy-mm-dd'), TO_DATE('1990-09-01', 'yyyy-mm-dd'), '4 Privet Drive', 'Surrey', 'Whinging', 'UK', 'WD257LR', '+1 (345)-785-0990', '+1 (456)-902-0400', 'harrypotter@hogwarts.com') 
INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) 
VALUES (10,'Snow', 'Jon', 'Knight', TO_DATE('1986-07-05', 'yyyy-mm-dd'), TO_DATE('1996-09-01', 'yyyy-mm-dd'), '1210 Northern Lane', 'Castle Black', 'Winterfell', 'Westeros', '88854', '+1 (311)-095-5160', '+1 (902)-992-0431', 'jonsnow@winterfell.net') 
SELECT * FROM DUAL;

INSERT ALL
INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL)
VALUES (60, 'Will', 'Smith', 'Overbrook', 'willsm@comcast.net')
INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, EMAIL)
VALUES (61, 'Winston', 'Schmidt', 'Associated Strategies', 'schmittyboy@associatedstrat.com')
SELECT * FROM DUAL;

--2.4 UPDATE--

UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE CUSTOMERID = 32;

UPDATE ARTIST SET NAME='CCR' WHERE ARTISTID = 76;

--2.5 LIKE--

SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN--

SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE ('2003-06-01', 'yyyy/mm/dd') AND TO_DATE ('2004-03-01', 'yyyy/mm/dd');

--2.7 DELETE--

DELETE FROM INVOICELINE WHERE INVOICEID IN (50, 61, 342, 116, 245, 268, 290);

DELETE FROM INVOICE WHERE CUSTOMERID=32;

DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';


------SECTION 3: SQL FUNCTIONS-------

--3.1 SYSTEM DEFINED FUNCTIONS--

--Create a function that returns the current time.
SELECT CURRENT_TIMESTAMP FROM DUAL;
--Create a function that returns the length of name in MEDIATYPE table
SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS--

--Create a function that returns the average total of all invoices.
SELECT AVG(TOTAL) FROM INVOICE;
--Create a function that returns the most expensive track.
SELECT MAX (UNITPRICE) FROM TRACK;

--3.3 USER DEFINED SCALAR FUNCTIONS--

--Create a function that returns the average price of invoiceline items in the invoiceline table.
CREATE OR REPLACE FUNCTION FIND_AVG_PRICE
RETURN NUMBER AS
    AVGPRICE NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVGPRICE
    FROM INVOICELINE;
    RETURN AVGPRICE;
END;

--3.4 USER DEFINED TABLE VALUED FUNCTIONS--

--Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION FIND_YOUNG_EMPLOYEES
RETURN SYS_REFCURSOR
AS YOUNGEMPLOYEES SYS_REFCURSOR;
BEGIN
    OPEN YOUNGEMPLOYEES FOR
    SELECT * FROM EMPLOYEE
    WHERE BIRTHDATE > TO_DATE('1968-12-31', 'yyyy-mm-dd');
    RETURN YOUNGEMPLOYEES;
END;


------SECTION 4: STORED PROCEDURES------

--4.1 BASIC STORED PROCEDURE--
--Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE PROCEDURE FIRSTNAME_LASTNAME_SELECT
AS 
    EMPLOYEE_FIRSTNAME VARCHAR2; 
    EMPLOYEE_LASTNAME VARCHAR2;
    CURSOR EMP_FIRSTLAST IS (SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE);
        
BEGIN
    OPEN EMP_FIRSTLAST;
    LOOP
        FETCH EMP_FIRSTLAST INTO EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME;
        DBMS_OUTPUT.PUT_LINE(EMPLOYEE_FIRSTNAME || ' ' || EMPLOYEE_LASTNAME);
        EXIT WHEN EMP_FIRSTLAST%NOTFOUND;
    END LOOP;
END;

--4.2 STORED PROCEDURE INPUT PARAMETERS--
--Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_INFO
                            (EMPLOYEEFIRSTNAME IN VARCHAR,
                             EMPLOYEELASTNAME IN VARCHAR,
                             EMPLOYEEPHONE IN VARCHAR,
                             EMPLOYEEEMAIL IN VARCHAR)
AS
BEGIN
    UPDATE EMPLOYEE
    SET FIRSTNAME=EMPLOYEEFIRSTNAME, LASTNAME=EMPLOYEELASTNAME, 
        PHONE=EMPLOYEEPHONE, EMAIL=EMPLOYEEEMAIL 
        WHERE EMPLOYEEID = EMPLOYEEID;
END
;

--Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE RETURN_MANAGER (EMPLOYEEID IN NUMBER)
AS
    MANAGERID NUMBER;
BEGIN
    SELECT A.EMPLOYEEID, A.REPORTSTO INTO MANAGERID
    FROM EMPLOYEE A, EMPLOYEE B
    WHERE A.REPORTSTO = B.REPORTSTO
    AND A.EMPLOYEEID = B.EMPLOYEEID; 
END;


--4.3 STORED PROCEDURE OUTPUT PARAMETERS--
--Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE RETURN_NAME_COMPANY (CUSTID IN NUMBER, FIRSTN OUT VARCHAR2, LASTN OUT VARCHAR2, COMPN OUT VARCHAR2)
IS 
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO FIRSTN, LASTN, COMPN
    FROM CUSTOMER
    WHERE CUSTOMERID = CUSTID;
END;
/
    
------SECTION 5: TRANSACTIONS-------
--Create a transaction that given an invoiceId will delete that invoice 
CREATE OR REPLACE PROCEDURE DELETEINVOICE
    (
    AINVOICEID IN NUMBER
    )
IS
BEGIN
    EXECUTE IMMEDIATE 
        'ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    EXECUTE IMMEDIATE 
        'ALTER TABLE INVOICELINE ADD CONSTRAINT FK_INVOICELINEINVOICEID
        FOREIGN KEY (INVOICEID) REFERENCES INVOICE (INVOICEID) ON DELETE CASCADE';
    DELETE FROM
        INVOICE
    WHERE
        INVOICEID = AINVOICEID;
END;

------SECTION 6: TRIGGERS----------

--6.1 AFTER/FOR--
--Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER NEWRECORD
AFTER INSERT ON EMPLOYEE
FOR EACH ROW 
BEGIN 
    SELECT SQ_NEWEMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END;


------SECTION 7: JOINS------

--7.1 INNER--
--Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID 
FROM CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2 OUTER--
--Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL 
FROM CUSTOMER FULL OUTER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.3 RIGHT--
--Create a right join that joins album and artist specifying artist name and title.
SELECT ARTIST.NAME, ALBUM.TITLE 
FROM ARTIST RIGHT OUTER JOIN ALBUM ON ARTIST.ARTISTID=ALBUM.ARTISTID;

--7.4 CROSS--
--Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT ARTIST.NAME
FROM ARTIST CROSS JOIN ALBUM ORDER BY ARTIST.NAME ASC;

--7.5 SELF--
--Perform a self-join on the employee table, joining on the reportsto column.
SELECT E1.FIRSTNAME AS FIRSTNAMEOFEMP1 , E1.LASTNAME AS LASTNAMEOFEMP1, E2.FIRSTNAME AS FIRSTNAMEOFEMP1, E2.LASTNAME AS LASTNAMEOFEMP2
FROM EMPLOYEE E1, EMPLOYEE E2 
WHERE E1.REPORTSTO = E2.REPORTSTO;








